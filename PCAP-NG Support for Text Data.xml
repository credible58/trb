<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"[]>
<?rfc symrefs='yes' ?>
<?rfc toc='yes' ?>
<?rfc compact='yes' ?>
<?rfc subcompact='no' ?>
<?rfc inline='yes' ?>
<?rfc sortrefs='no' ?>
<?rfc strict='yes' ?>

<rfc category='info'
     ipr='trust200902'
     docName="draft-tuexen-opsawg-pcapng">

  <front>

    <title abbrev="pcapng">PCAP Next Generation Support for Text Data</title>

    <author initials='P.' surname='Offord' fullname='Paul Offord'>
      <organization abbrev='Advance7'>
                    Advance Seven Limited</organization>
      <address>
        <postal>
          <street>Endeavour House</street>
          <code>CM24 1SJ</code>
          <city>Stansted</city>
          <country>UK</country>
        </postal>
        <email>paul.offord@advance7.com</email>
      </address>
    </author>

    <date month="February" year="2018" />

    <abstract>
      <t>This document describes two new block types to support the
      recording of text-based data (such as machine data) into a
      pcapng file. This allows for the coexistence of text and binary
      diagnostic data in a single pcapng file.</t>
    </abstract>

  </front>


<!--===========================================================================

    MAIN BODY - still within the <rfc> tag

============================================================================-->

  <middle>

    <section title="Introduction">

      <t>Packet trace analysis has been proven to be a powerful way to analyse network
      	and application problems. Recent developments, however, have made analysis more
      	challenging, namely:
      
        <list style='hanging'>

          <t hangText='Encryption:'>
          An increasing number of network flows are becoming encrypted, and this
          is likely to include the encryption of TCP headers as IPv6 becomes more
          common.</t>

          <t hangText='Visibility:'>
          With the wider use of public cloud, virtualisation technologies and
          containerisation, it's becoming more difficult to capture packet traces.</t>

        </list>
			</t>

      <t>Supplementing and enriching packet trace data with other related data types is
      	attractive.  Imagine having a pcapng file that contains network packets, related
      	firewall log entries and application log data.  Such files could be explored and
      	manipulated with a whole range of commercial products and open source tools
      	such as Wireshark.</t>

			<t>Before reading this document, you should be familiar with the content of 
				the RFC draft document "PCAP Next Generation (pcapng) Capture File Format".</t>

    </section>

    <section title='Terminology'>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target='RFC2119'/>.</t>

      <section title="Acronyms">

        <t>The following acronyms are used throughout this document:

          <list style='hanging'>
            <t hangText='SHB:'>Section Header Block</t>
            <t hangText='IDB:'>Interface Description Block</t>
            <t hangText='ISB:'>Interface Statistics Block</t>
            <t hangText='EPB:'>Enhanced Packet Block</t>
            <t hangText='SPB:'>Simple Packet Block</t>
            <t hangText='NRB:'>Name Resolution Block</t>
            <t hangText='TSDB:'>Text Source Descriptor Block</t>
            <t hangText='TRB:'>Text Record Block</t>
            <t hangText='CB:'>Custom Block</t>
          </list>

        </t>

      </section>

    </section>

    <section title="Design Criteria">

      <section anchor="section_block" title="General Block Structure">

        <t>A capture file is organized in blocks, that are appended one to
        another to form the file. All the blocks share a common format, which
        is shown in <xref target="formatblock"/>.</t>

      </section>

      <section title="Block Types">

        <t>This pcapng extension introduces two new block types
        <xref target="block-types"/>:</t>
        
        <t>TRB (Text Record Block) is a block that carries text data and
        	represents an event. There is one TRB for every event.</t>
        	
        <t>TSDB (Text Source Description Block) is a block that carries
        	a data descriptors for the TRBs. A pcapng file may contain
        	text data with many data schemes and there is one TSDB for 
        	each schema.</t>

      </section>

      <section title="Logical Block Hierarchy">

        <t>The blocks build a logical hierarchy as they refer to each other.
        <xref target="block-hierarchy"/> shows the logical hierarchy of the
        currently defined blocks in the form of a "tree view":</t>

        <figure anchor="block-hierarchy" title="Logical Block Hierarchy of a pcapng File">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
Section Header
|
+- Interface Description
|  +- Simple Packet
|  +- Enhanced Packet
|  +- Interface Statistics
|
+- Text Source Description
|  +- Text Record
|
+- Name Resolution
</artwork>
        </figure>

        <t>For example: each text record refers to a specific text source description.</t>

      </section>


      <section title="Physical File Layout">

        <t>The file MUST begin with a Section Header Block. However, more than
        one Section Header Block can be present in the capture file, each one
        covering the data following it until the next one (or the end of
        file). A Section includes the data delimited by two Section Header
        Blocks (or by a Section Header Block and the end of the file),
        including the first Section Header Block.</t>

        <t>In case an application cannot read a Section because of different
        version number, it MUST skip everything until the next Section Header
        Block. Note that, in order to properly skip the blocks until the next
        section, all blocks MUST have the fields Type and Length at the
        beginning. In order to properly skip blocks in the backward direction,
        all blocks MUST have the Length repeated at the end of the block.
        These are mandatory requirements that MUST be maintained in future
        versions of the block format.</t>

        <t><xref target="fssample-SHB"/> shows a typical file layout, with a
        single Section Header that covers the whole file.</t>

        <figure anchor="fssample-SHB" title="File structure example: Typical layout with a single Section Header Block">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| SHB v1.0  |                      Data                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>

        <t><xref target="fssample-SHB3"/>
        shows a file that contains three headers, and is normally the result
        of file concatenation. An application that understands only version
        1.0 of the file format skips the intermediate section and restart
        processing the packets after the third Section Header.</t>

        <figure anchor="fssample-SHB3" title="File structure example: three Section Header Blocks in a single file">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
|--   1st Section   --|--   2nd Section   --|--  3rd Section  --|
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| SHB v1.0  |  Data   | SHB V1.1  |  Data   | SHB V1.0  |  Data |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>

        <t><xref target="fssample-minimum"/>
        shows a file comparable to a "classic libpcap" file - the minimum for
        a useful capture file. It contains a single Section Header Block
        (SHB), a single Interface Description Block (IDB) and a few Enhanced
        Packet Blocks (EPB).</t>

        <figure anchor="fssample-minimum" title="File structure example: a pcapng file similar to a classical libpcap file">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| SHB | IDB | EPB | EPB |    ...    | EPB |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>

      </section>


    <section title="Block Definition">

      <t>This section details the format of the new blocks to support text data.</t>

      <section anchor="section_tsdb" title="Text Source Description Block">

        <t>An Text Record Block (TRB) is the container that
        describes the format and attributes of the TRB data.</t>

        <t>Tools that write / read the capture file associate an incrementing
        32-bit number (starting from '0') to each Interface Definition Block,
        called the Interface ID for the interface in question. This number is
        unique within each Section and identifies the interface to which the
        IDB refers; it is only unique inside the current section, so, two
        Sections can have different interfaces identified by the same
        Interface ID values. This unique identifier is referenced by other
        blocks, such as Enhanced Packet Blocks and Interface Statistic Blocks,
        to indicate the interface to which the block refers (such the
        interface that was used to capture the packet that an Enhanced Packet
        Block contains or to which the statistics in an Interface Statistic
        Block refer).</t>

        <t>There must be an Interface Description Block for each
        interface to which another block refers. Blocks such as an Enhanced
        Packet Block or an Interface Statistics Block contain an Interface ID
        value referring to a particular interface, and a Simple Packet Block
        implicitly refers to an interface with an Interface ID of 0. If the
        file does not contain any blocks that use an Interface ID, then the
        file does not need to have any IDBs.</t>

typedef struct _TSDB_SUB_HDR
{
	UINT16 version; /* Prior to BDS2 was used for type, now used for TSDB version e.g. 3 */
	UINT16 format;  /* TLV, etc. */
	UINT16 scheme_index;  /* Allows definition of multile schemes - these are then linked to the TRBs by scheme_index */
	UINT16 reserved;
	/* Adding space for future GUID support e.g. a data descriptor scheme could have a GUID */
	UINT32 guid1;
	UINT32 guid2;
	UINT32 guid3;
	UINT32 guid4;
} TSDB_SUB_HDR;

// Text Source Descriptor Block (TSDB)
typedef struct _NG_TSDB {
	UINT32 block_type;
	UINT32 block_total_length;
	TSDB_SUB_HDR tsdb_sub_hdr;
    char   schema[MAX_LOG_VALUE_LENGTH * MAX_LOG_FIELD_COUNT];
} NG_TSDB;

        <t>An Interface Description Block is valid only inside the section
        to which it belongs. The structure of a Interface Description Block is
        shown in <xref target="format_idb"/>.</t>

        <figure anchor="format_idb" title="Interface Description Block Format">
          <artwork xml:space="preserve" name="" type="" align="center" alt="" width="" height="">
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------------------------------------------------------+
 0 |                    Block Type = 0x80000010                    |
   +---------------------------------------------------------------+
 4 |                      Block Total Length                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 8 |            Version            |            Format             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
12 |          Scheme Index         |           Reserved            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
16 |                             GUID1                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
24 |                             GUID2                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
32 |                             GUID3                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
40 |                             GUID4                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
44 |                           FD Length                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
48 /                                                               /
   /                       Field Descriptors                       /
   /              variable length, padded to 32 bits               /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                                                               /
   /                      Options (variable)                       /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Block Total Length                       |
   +---------------------------------------------------------------+
 </artwork>
        </figure>

        <t>The meaning of the fields is:
          <list style="symbols">

            <t>Block Type: The block type of the Text Source Description Block
            is 16.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

            <t>Version: allows for the handling of revisions of the TSDB format.
            	Currently set to 3.</t>

            <t>Format: The format of the Field Descriptors.</t>

            <t>Reserved: not used - MUST be filled with 0, and ignored by
            pcapng file readers.</t>

            <t>FD Length: The total length of the Field Descriptors.</t>

            <t>Options: optionally, a list of options (formatted according to
            the rules defined in <xref target="section_opt"/>) can be present.</t>

          </list>
        </t>

        <t>In addition to the options defined in <xref target="section_opt"/>,
        the following options are valid within this block:</t>

        <texttable anchor="optionstsdb" title="Text Source Description Block Options">

          <ttcol align="left">Name</ttcol>
          <ttcol align="left">Code</ttcol>
          <ttcol align="left">Length</ttcol>
          <ttcol align="left">Multiple allowed?</ttcol>

          <c>missing_value</c>
          <c>2</c>
          <c>1</c>
          <c>no</c>

          <c>summary</c>
          <c>3</c>
          <c>Variable</c>
          <c>no</c>

        </texttable>

        <t>
          <list hangIndent="8" style="hanging">

            <t hangText="missing_value:"><vspace blankLines="0"/>If a field value in
            	a TRB has zero length, this value SHOULD be substituted.  If this option
            	is not specified, the program reading the pcapng file May handle the
            	missing value in any appropriate manner.</t>

            <t>Examples: -.</t>

            <t hangText="summary:"><vspace blankLines="0"/>The
            summary option defines a format for a summary value that is generated for
            each TRB.  If the program reading the file generates a summary vale for each
            TRB it SHOULD use this format. Field values can be used in the summary value
            and are represented by Field Index.</t>

            <t>Examples: "Query: %4 - Rsp Code: %5" to generate "Query: GET / - Rsp Code: 401".</t>

          </list>
        </t>
      </section>


      <section anchor="section_epb" title="Enhanced Packet Block">

        <t>An Enhanced Packet Block (EPB) is the standard container for
        storing the packets coming from the network. The Enhanced Packet Block
        is optional because packets can be stored either by means of this
        block or the Simple Packet Block, which can be used to speed up
        capture file generation; or a file may have no packets in it. The
        format of an Enhanced Packet Block is shown in <xref
        target="format_epb"/>.</t>

        <t>The Enhanced Packet Block is an improvement over the original, now
        obsolete, <xref target="appendix_pb">Packet Block</xref>:

          <list style="symbols">

            <t>it stores the Interface Identifier as a 32-bit integer value.
            This is a requirement when a capture stores packets coming from a
            large number of interfaces</t>

            <t>unlike the <xref target="appendix_pb">Packet Block</xref>, the
            number of packets dropped by the capture system between this
            packet and the previous one is not stored in the header, but
            rather in an option of the block itself.</t>

          </list>
        </t>

        <figure anchor="format_epb" title="Enhanced Packet Block Format">
          <artwork xml:space="preserve" name="" type="" align="center" alt="" width="" height="">
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------------------------------------------------------+
 0 |                    Block Type = 0x00000006                    |
   +---------------------------------------------------------------+
 4 |                      Block Total Length                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 8 |                         Interface ID                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
12 |                        Timestamp (High)                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
16 |                        Timestamp (Low)                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
20 |                    Captured Packet Length                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
24 |                    Original Packet Length                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
28 /                                                               /
   /                          Packet Data                          /
   /              variable length, padded to 32 bits               /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                                                               /
   /                      Options (variable)                       /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Block Total Length                       |
   +---------------------------------------------------------------+
</artwork>
        </figure>

        <t>The Enhanced Packet Block has the following fields:
          <list style="symbols">

            <t>Block Type: The block type of the Enhanced Packet Block is 6.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

            <t>Interface ID: it specifies the interface this packet comes
            from; the correct interface will be the one whose Interface
            Description Block (within the current Section of the file) is
            identified by the same number (see <xref target="section_idb"/>)
            of this field. The interface ID MUST be valid, which means that an
            matching interface description block MUST exist.</t>

            <t>Timestamp (High) and Timestamp (Low): upper 32 bits and
            lower 32 bits of a 64-bit timestamp. The timestamp is a
            single 64-bit unsigned integer that represents the number of
            units of time that have elapsed since 1970-01-01 00:00:00 UTC.
            The length of a unit of time is specified by the 'if_tsresol'
            option (see <xref target="format_idb"/>) of the Interface
            Description block referenced by this packet. Note that,
            unlike timestamps in the libpcap file format, timestamps in
            Enhanced Packet Blocks are not saved as two 32-bit values
            that represent the seconds and microseconds that have
            elapsed since 1970-01-01 00:00:00 UTC. Timestamps in Enhanced
            Packet Blocks are saved as two 32-bit words that represent
            the upper and lower 32 bits of a single 64-bit quantity.</t>

            <t>Captured Packet Length: number of octets captured from the
            packet (i.e. the length of the Packet Data field). It will be the
            minimum value among the Original Packet Length and the
            snapshot length for the interface (SnapLen, defined in
            <xref target="format_idb"/>). The value of this field does
            not include the padding octets added at the end of the Packet
            Data field to align the Packet Data field to a 32-bit
            boundary.</t>

            <t>Original Packet Length: actual length of the packet when it was
            transmitted on the network. It can be different from Captured
            Packet Length if the packet has been truncated by the capture
            process.</t>

            <t>Packet Data: the data coming from the network, including
            link-layer headers. The actual length of this field is
            Captured Packet Length plus the padding to a 32-bit
            boundary. The format of the link-layer headers depends on
            the LinkType field specified in the Interface Description
            Block (see <xref target="section_idb"/>) and it is specified
            in the entry for that format in the <eref
            target="http://www.tcpdump.org/linktypes.html">the
            tcpdump.org link-layer header types registry</eref>.</t>

            <t>Options: optionally, a list of options (formatted according to
            the rules defined in <xref target="section_opt"/>) can be present.</t>

          </list>
        </t>

        <t>In addition to the options defined in <xref target="section_opt"/>,
        the following options are valid within this block:</t>

        <texttable anchor="options_epb" title="Enhanced Packet Block Options">
          <ttcol align="left">Name</ttcol>
          <ttcol align="left">Code</ttcol>
          <ttcol align="left">Length</ttcol>
          <ttcol align="left">Multiple allowed?</ttcol>

          <c>epb_flags</c>
          <c>2</c>
          <c>4</c>
          <c>no</c>

          <c>epb_hash</c>
          <c>3</c>
          <c>variable</c>
          <c>yes</c>

          <c>epb_dropcount</c>
          <c>4</c>
          <c>8</c>
          <c>no</c>
        </texttable>

        <t>
          <list hangIndent="8" style="hanging">

            <t hangText="epb_flags:"><vspace blankLines="0"/>The epb_flags
            option is a 32-bit flags word containing link-layer information. A
            complete specification of the allowed flags can be found in <xref
            target="section_epb_flags"/>.</t>

            <t>Example: '0'.</t>

            <t hangText="epb_hash:"><vspace blankLines="0"/>The epb_hash
            option contains a hash of the packet. The first octet specifies the
            hashing algorithm, while the following octets contain the actual
            hash, whose size depends on the hashing algorithm, and hence from
            the value in the first octet. The hashing algorithm can be: 2s
            complement (algorithm octet = 0, size=XXX), XOR (algorithm octet =
            1, size=XXX), CRC32 (algorithm octet = 2, size = 4), MD-5
            (algorithm octet = 3, size=XXX), SHA-1 (algorithm octet = 4,
            size=XXX). The hash covers only the packet, not the header added
            by the capture driver: this gives the possibility to calculate it
            inside the network card. The hash allows easier comparison/merging
            of different capture files, and reliable data transfer between the
            data acquisition system and the capture library.</t>

            <t>Examples: '02 EC 1D 87 97', '03 45 6E C2 17 7C 10 1E 3C 2E 99 6E C2 9A 3D 50 8E'.</t>

            <t hangText="epb_dropcount:"><vspace blankLines="0"/>The
            epb_dropcount option is a 64-bit integer value specifying the
            number of packets lost (by the interface and the operating system)
            between this packet and the preceding one for the same
            interface or, for the first packet for an interface, between
            this packet and the start of the capture process.</t>

            <t>Example: '0'.</t>

          </list>
        </t>

        <section anchor="section_epb_flags" title="Enhanced Packet Block Flags Word">

          <t>The Enhanced Packet Block Flags Word is a 32-bit value that
          contains link-layer information about the packet.</t>

          <t>The word is encoded as an unsigned 32-bit integer, using the
          endianness of the Section Header Block scope it is in. In the
          following table, the bits are numbered with 0 being the most-
          significant bit and 31 being the least-significant bit of the 32-bit
          unsigned integer. The meaning of the bits is the following:</t>

          <texttable title="">
            <ttcol align="left">Bit Number</ttcol>
            <ttcol align="left">Description</ttcol>

            <c>0-1</c>
            <c>Inbound / Outbound packet (00 = information not available, 01 =
            inbound, 10 = outbound)</c>

            <c>2-4</c>
            <c>Reception type (000 = not specified, 001 = unicast, 010 =
            multicast, 011 = broadcast, 100 = promiscuous).</c>

            <c>5-8</c>
            <c>FCS length, in octets (0000 if this information is not available).
            This value overrides the if_fcslen option of the Interface Description
            Block, and is used with those link layers (e.g. PPP) where the length
            of the FCS can change during time.</c>

            <c>9-15</c>
            <c>Reserved (MUST be set to zero).</c>

            <c>16-31</c>
            <c>link-layer-dependent errors (Bit 31 = symbol error, Bit 30 =
            preamble error, Bit 29 = Start Frame Delimiter error, Bit 28 =
            unaligned frame error, Bit 27 = wrong Inter Frame Gap error, Bit 26 =
            packet too short error, Bit 25 = packet too long error, Bit 24 = CRC
            error, other?? are 16 bit enough?).</c>

          </texttable>
        </section>

      </section>


      <section anchor="section_spb" title="Simple Packet Block">

        <t>The Simple Packet Block (SPB) is a lightweight container for
        storing the packets coming from the network. Its presence is
        optional.</t>

        <t>A Simple Packet Block is similar to an Enhanced Packet Block (see
        <xref target="section_epb"/>), but it is smaller, simpler to process
        and contains only a minimal set of information. This block is
        preferred to the standard Enhanced Packet Block when performance or
        space occupation are critical factors, such as in sustained traffic
        capture applications. A capture file can contain both Enhanced Packet
        Blocks and Simple Packet Blocks: for example, a capture tool could
        switch from Enhanced Packet Blocks to Simple Packet Blocks when the
        hardware resources become critical.</t>

        <t>The Simple Packet Block does not contain the Interface ID field.
        Therefore, it MUST be assumed that all the Simple Packet Blocks have
        been captured on the interface previously specified in the first
        Interface Description Block.</t>

        <t><xref target="format_spb"/> shows the format of the Simple Packet
        Block.</t>

        <figure anchor="format_spb" title="Simple Packet Block Format">
          <artwork xml:space="preserve" name="" type="" align="center" alt="" width="" height="">
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------------------------------------------------------+
 0 |                    Block Type = 0x00000003                    |
   +---------------------------------------------------------------+
 4 |                      Block Total Length                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 8 |                    Original Packet Length                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
12 /                                                               /
   /                          Packet Data                          /
   /              variable length, padded to 32 bits               /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Block Total Length                       |
   +---------------------------------------------------------------+
 </artwork>
        </figure>

        <t>The Simple Packet Block has the following fields:
          <list style="symbols">
            <t>Block Type: The block type of the Simple Packet Block is 3.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

            <t>Original Packet Length: actual length of the packet when it was
            transmitted on the network. It can be different from length of the
            Packet Data field's length if the packet has been truncated by the
            capture process, in which case the SnapLen value in <xref
            target="section_idb"/> will be less than this Original Packet
            Length value, and the SnapLen value MUST be used to determine the
            size of the Packet Data field length.</t>

            <t>Packet Data: the data coming from the network, including
            link-layer headers. The length of this field can be derived
            from the field Block Total Length, present in the Block
            Header, and it is the minimum value among the SnapLen
            (present in the Interface Description Block) and the
            Original Packet Length (present in this header). The format
            of the data within this Packet Data field depends on the
            LinkType field specified in the Interface Description Block
            (see <xref target="section_idb"/>) and it is specified in
            the entry for that format in <eref
            target="http://www.tcpdump.org/linktypes.html">the
            tcpdump.org link-layer header types registry</eref>.</t>

          </list>
        </t>

        <t>The Simple Packet Block does not contain the timestamp because this
        is often one of the most costly operations on PCs. Additionally, there
        are applications that do not require it; e.g. an Intrusion Detection
        System is interested in packets, not in their timestamp.</t>

        <t>A Simple Packet Block cannot be present in a Section that has more
        than one interface because of the impossibility to refer to the
        correct one (it does not contain any Interface ID field).</t>

        <t>The Simple Packet Block is very efficient in term of disk space: a
        snapshot whose length is 100 octets requires only 16 octets of overhead,
        which corresponds to an efficiency of more than 86%.</t>

      </section>


      <section anchor="section_nrb" title="Name Resolution Block">

        <t>The Name Resolution Block (NRB) is used to support the correlation
        of numeric addresses (present in the captured packets) and their
        corresponding canonical names and it is optional. Having the literal
        names saved in the file prevents the need for performing name
        resolution at a later time, when the association between names and
        addresses may be different from the one in use at capture time.
        Moreover, the NRB avoids the need for issuing a lot of DNS requests
        every time the trace capture is opened, and also provides name
        resolution when reading the capture with a machine not connected to
        the network.</t>

        <t>A Name Resolution Block is often placed at the beginning of the
        file, but no assumptions can be taken about its position. Multiple
        NRBs can exist in a pcapng file, either due to memory constraints or
        because additional name resolutions were performed by file processing
        tools, like network analyzers.</t>

        <t>A Name Resolution Block need not contain any Records, except the
        nrb_record_end Record which MUST be the last Record. The addresses and
        names in NRB Records MAY be repeated multiple times; i.e., the same IP
        address may resolve to multiple names, the same name may resolve to
        the multiple IP addresses, and even the same address-to-name pair may
        appear multiple times, in the same NRB or across NRBs.</t>

        <t>The format of the Name Resolution Block is shown in <xref
        target="format_nrb"/>.</t>

        <figure anchor="format_nrb" title="Name Resolution Block Format">
          <artwork xml:space="preserve" name="" type="" align="center" alt="" width="" height="">
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------------------------------------------------------+
 0 |                    Block Type = 0x00000004                    |
   +---------------------------------------------------------------+
 4 |                      Block Total Length                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 8 |      Record Type              |      Record Value Length      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
12 /                       Record Value                            /
   /              variable length, padded to 32 bits               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                  . . . other records . . .                    .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Record Type = nrb_record_end |   Record Value Length = 0     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                                                               /
   /                      Options (variable)                       /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Block Total Length                       |
   +---------------------------------------------------------------+
 </artwork>
        </figure>

        <t>The Name Resolution Block has the following fields:
          <list style="symbols">

            <t>Block Type: The block type of the Name Resolution Block is 4.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

          </list>
        </t>

        <t>This is followed by zero or more Name Resolution Records (in the
        TLV format), each of which contains an association between a network
        address and a name. An nrb_record_end MUST be added after the last
        Record, and MUST exist even if there are no other Records in the NRB.
        There are currently three possible types of records:</t>

        <texttable anchor="nrrecords" title="Name Resolution Block Records">
          <ttcol align="left">Name</ttcol>
          <ttcol align="left">Code</ttcol>
          <ttcol align="left">Length</ttcol>

          <c>nrb_record_end</c>
          <c>0x0000</c>
          <c>0</c>

          <c>nrb_record_ipv4</c>
          <c>0x0001</c>
          <c>Variable</c>

          <c>nrb_record_ipv6</c>
          <c>0x0002</c>
          <c>Variable</c>
        </texttable>

        <t>
          <list hangIndent="8" style="hanging">

            <t hangText="nrb_record_end:"><vspace blankLines="0"/>The
            nrb_record_end record delimits the end of name resolution
            records. This record is needed to determine when the list of name
            resolution records has ended and some options (if any) begin.</t>

            <t hangText="nrb_record_ipv4:"><vspace blankLines="0"/>The
            nrb_record_ipv4 record specifies an IPv4 address (contained in the
            first 4 octets), followed by one or more zero-terminated UTF-8
            strings containing the DNS entries for that address. The minimum
            valid Record Length for this Record Type is thus 6: 4 for the IP
            octets, 1 character, and a zero-value octet terminator. Note that
            the IP address is treated as four octets, one for each octet of
            the IP address; it is not a 32-bit word, and thus the endianness
            of the SHB does not affect this field's value.</t>

            <t>Example: '127 0 0 1'"localhost".</t>

            <t>[Open issue: is an empty string (i.e., just a zero-value octet)
            valid?]</t>

            <t hangText="nrb_record_ipv6:"><vspace blankLines="0"/>The
            nrb_record_ipv6 record specifies an IPv6 address (contained in the
            first 16 octets), followed by one or more zero-terminated strings
            containing the DNS entries for that address. The minimum valid
            Record Length for this Record Type is thus 18: 16 for the IP
            octets, 1 character, and a zero-value octet terminator.</t>

            <t>Example: '20 01 0d b8 00 00 00 00 00 00 00 00 12 34 56
            78'"somehost".</t>

            <t>[Open issue: is an empty string (i.e., just a zero-value octet)
            valid?]</t>

          </list>
        </t>

        <t>Record Types other than those specified earlier MUST be ignored and
        skipped past. More Record Types will likely be defined in the future,
        and MUST NOT break backwards compatibility.</t>

        <t>Each Record Value is aligned to and padded to a 32-bit boundary.
        The corresponding Record Value Length reflects the actual length of
        the Record Value; it does not include the lengths of the Record Type
        field, the Record Value Length field, any padding for the Record
        Value, or anything after the Record Value. For Record Types with name
        strings, the Record Length does include the zero-value octet
        terminating that string. A Record Length of 0 is valid, unless
        indicated otherwise.</t>

        <t>After the list of Name Resolution Records, optionally, a list of
        options (formatted according to the rules defined in <xref
        target="section_opt"/>) can be present.</t>

        <t>In addition to the options defined in <xref target="section_opt"/>,
        the following options are valid within this block:</t>

        <texttable  anchor="options_nrb" title="Name Resolution Block Options">
          <ttcol align="left">Name</ttcol>
          <ttcol align="left">Code</ttcol>
          <ttcol align="left">Length</ttcol>
          <ttcol align="left">Multiple allowed?</ttcol>

          <c>ns_dnsname</c>
          <c>2</c>
          <c>Variable</c>
          <c>no</c>

          <c>ns_dnsIP4addr</c>
          <c>3</c>
          <c>4</c>
          <c>no</c>

          <c>ns_dnsIP6addr</c>
          <c>4</c>
          <c>16</c>
          <c>no</c>
        </texttable>

        <t>
          <list hangIndent="8" style="hanging">

            <t hangText="ns_dnsname:"><vspace blankLines="0"/>The ns_dnsname
            option is a UTF-8 string containing the name of the machine (DNS
            server) used to perform the name resolution.</t>

            <t>Example: "our_nameserver".</t>

            <t hangText="ns_dnsIP4addr:"><vspace blankLines="0"/>The
            ns_dnsIP4addr option specifies the IPv4 address of the DNS server.
            Note that the IP address is treated as four octets, one for each
            octet of the IP address; it is not a 32-bit word, and thus the
            endianness of the SHB does not affect this field's value.</t>

            <t>Example: '192 168 0 1'.</t>

            <t hangText="ns_dnsIP6addr:"><vspace blankLines="0"/>The
            ns_dnsIP6addr option specifies the IPv6 address of the DNS
            server.</t>

            <t>Example: '20 01 0d b8 00 00 00 00 00 00 00 00 12 34 56 78'.</t>

          </list>
        </t>

      </section>


      <section anchor="section_isb" title="Interface Statistics Block">

        <t>The Interface Statistics Block (ISB) contains the capture
        statistics for a given interface and it is optional. The statistics
        are referred to the interface defined in the current Section
        identified by the Interface ID field. An Interface Statistics Block is
        normally placed at the end of the file, but no assumptions can be
        taken about its position - it can even appear multiple times for the
        same interface.</t>

        <t>The format of the Interface Statistics Block is shown in <xref
        target="format_isb"/>.</t>

        <figure anchor="format_isb" title="Interface Statistics Block Format">
          <artwork xml:space="preserve" name="" type="" align="center" alt="" width="" height="">
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------------------------------------------------------+
 0 |                   Block Type = 0x00000005                     |
   +---------------------------------------------------------------+
 4 |                      Block Total Length                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 8 |                         Interface ID                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
12 |                        Timestamp (High)                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
16 |                        Timestamp (Low)                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
20 /                                                               /
   /                      Options (variable)                       /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Block Total Length                       |
   +---------------------------------------------------------------+
 </artwork>
        </figure>

        <t>The fields have the following meaning:
          <list style="symbols">

            <t>Block Type: The block type of the Interface Statistics Block is
            5.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

            <t>Interface ID: specifies the interface these statistics refers
            to; the correct interface will be the one whose Interface
            Description Block (within the current Section of the file) is
            identified by same number (see <xref target="section_idb"/>) of
            this field.</t>

            <t>Timestamp: time this statistics refers to. The format of the
            timestamp is the same already defined in the Enhanced Packet Block
            (<xref target="section_epb"/>).</t>

            <t>Options: optionally, a list of options (formatted according to
            the rules defined in <xref target="section_opt"/>) can be present.</t>

          </list>
        </t>

        <t>All the statistic fields are defined as options in order to deal
        with systems that do not have a complete set of statistics. Therefore,
        In addition to the options defined in <xref target="section_opt"/>,
        the following options are valid within this block:</t>

        <texttable anchor="options_isb" title="Interface Statistics Block Options">
          <ttcol align="left">Name</ttcol>
          <ttcol align="left">Code</ttcol>
          <ttcol align="left">Length</ttcol>
          <ttcol align="left">Multiple allowed?</ttcol>

          <c>isb_starttime</c>
          <c>2</c>
          <c>8</c>
          <c>no</c>

          <c>isb_endtime</c>
          <c>3</c>
          <c>8</c>
          <c>no</c>

          <c>isb_ifrecv</c>
          <c>4</c>
          <c>8</c>
          <c>no</c>

          <c>isb_ifdrop</c>
          <c>5</c>
          <c>8</c>
          <c>no</c>

          <c>isb_filteraccept</c>
          <c>6</c>
          <c>8</c>
          <c>no</c>

          <c>isb_osdrop</c>
          <c>7</c>
          <c>8</c>
          <c>no</c>

          <c>isb_usrdeliv</c>
          <c>8</c>
          <c>8</c>
          <c>no</c>
        </texttable>

        <t>
          <list hangIndent="8" style="hanging">

            <t hangText="isb_starttime:"><vspace blankLines="0"/>The
            isb_starttime option specifies the time the capture started; time
            will be stored in two blocks of four octets each. The format of the
            timestamp is the same as the one defined in the Enhanced Packet
            Block (<xref target="section_epb"/>).</t>

            <t>Example: '97 c3 04 00 aa 47 ca 64' in Little Endian, decodes to
            06/29/2012 06:16:50 UTC.</t>

            <t hangText="isb_endtime:"><vspace blankLines="0"/>The isb_endtime
            option specifies the time the capture ended; time will be stored
            in two blocks of four octets each. The format of the timestamp is
            the same as the one defined in the Enhanced Packet Block (<xref
            target="section_epb"/>).</t>

            <t>Example: '96 c3 04 00 73 89 6a 65', in Little Endian, decodes
            to 06/29/2012 06:17:00 UTC.</t>

            <t hangText="isb_ifrecv:"><vspace blankLines="0"/>The isb_ifrecv
            option specifies the 64-bit unsigned integer number of packets
            received from the physical interface starting from the beginning
            of the capture.</t>

            <t>Example: the decimal number 100.</t>

            <t hangText="isb_ifdrop:"><vspace blankLines="0"/>The isb_ifdrop
            option specifies the 64-bit unsigned integer number of packets
            dropped by the interface due to lack of resources starting from
            the beginning of the capture.</t>

            <t>Example: '0'.</t>

            <t hangText="isb_filteraccept:"><vspace blankLines="0"/>The
            isb_filteraccept option specifies the 64-bit unsigned integer
            number of packets accepted by filter starting from the beginning
            of the capture.</t>

            <t>Example: the decimal number 100.</t>

            <t hangText="isb_osdrop:"><vspace blankLines="0"/>The isb_osdrop
            option specifies the 64-bit unsigned integer number of packets
            dropped by the operating system starting from the beginning of the
            capture.</t>

            <t>Example: '0'.</t>

            <t hangText="isb_usrdeliv:"><vspace blankLines="0"/>The
            isb_usrdeliv option specifies the 64-bit unsigned integer number
            of packets delivered to the user starting from the beginning of
            the capture. The value contained in this field can be different
            from the value 'isb_filteraccept - isb_osdrop' because some
            packets could still be in the OS buffers when the capture
            ended.</t>

            <t>Example: '0'.</t>

          </list>
        </t>

        <t>All the fields that refer to packet counters are 64-bit values,
        represented with the octet order of the current section. Special care
        must be taken in accessing these fields: since all the blocks are
        aligned to a 32-bit boundary, such fields are not guaranteed to be
        aligned on a 64-bit boundary.</t>

      </section>


      <section anchor="section_custom_block" title="Custom Block">

        <t>A Custom Block (CB) is the container for storing custom data that
        is not part of another block; for storing custom data as part of
        another block, see <xref target="section_custom_option"/>. The Custom
        Block is optional, can be repeated any number of times, and can appear
        before or after any other block except the first Section Header Block
        which must come first in the file. Different Custom Blocks, of
        different type codes and/or different Private Enterprise Numbers, may
        be used in the same pcapng file. The format of a Custom Block is shown
        in <xref target="format_custom_block"/>.</t>

        <figure anchor="format_custom_block" title="Custom Block Format">
          <artwork xml:space="preserve" name="" type="" align="center" alt="" width="" height="">
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------------------------------------------------------+
 0 |             Block Type = 0x00000BAD or 0x40000BAD             |
   +---------------------------------------------------------------+
 4 |                      Block Total Length                       |
   +---------------------------------------------------------------+
 8 |                Private Enterprise Number (PEN)                |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
12 /                                                               /
   /                          Custom Data                          /
   /              variable length, padded to 32 bits               /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                                                               /
   /                      Options (variable)                       /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Block Total Length                       |
   +---------------------------------------------------------------+
</artwork>
        </figure>

        <t>The Custom Block uses the type code 0x00000BAD (2989 in decimal)
        for a custom block that pcapng re-writers can copy into new files, and
        the type code 0x40000BAD (1073744813 in decimal) for one that should
        not be copied. See <xref target="section_vendor_copy"/> for details.</t>

        <t>The Custom Block has the following fields:
          <list style="symbols">

            <t>Block Type: The block type of the Custom Block is 0x00000BAD or
            0x40000BAD, as described previously.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

            <t>Private Enterprise Number: An IANA-assigned Private Enterprise
            Number identifying the organization which defined the Custom
            Block. See <xref target="section_vendor_uses"/> for details. The
            PEN number MUST be encoded using the same endianness as the Section
            Header Block it is within the scope of.</t>

            <t>Custom Data: the custom data, padded to a 32 bit boundary.</t>

            <t>Options: optionally, a list of options (formatted according to
            the rules defined in <xref target="section_opt"/>) can be present.
            Note that custom options for the Custom Block still use the custom
            option format and type code, as described in <xref
            target="section_custom_option"/>.</t>

          </list>
        </t>

      </section>

    </section>


    <section title="Experimental Blocks (deserve further investigation)">

      <section title="Alternative Packet Blocks (experimental)">

        <t>Can some other packet blocks (besides the ones described in the
        previous paragraphs) be useful?</t>

      </section>

      <section title="Compression Block (experimental)">

        <t>The Compression Block is optional. A file can contain an arbitrary
        number of these blocks. A Compression Block, as the name says, is used
        to store compressed data. Its format is shown in <xref
        target="formatcb"/>.</t>

        <figure anchor="formatcb" title="Compression Block Format">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------------------------------------------------------+
|                        Block Type = ?                         |
+---------------------------------------------------------------+
|                      Block Total Length                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Compr. Type  |                                               |
+-+-+-+-+-+-+-+-+                                               |
|                                                               |
|                       Compressed Data                         |
|                                                               |
|  variable length, octet-aligned and padded to end on a 32-bit |
|                         boundary                              |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      Block Total Length                       |
+---------------------------------------------------------------+
 </artwork>
        </figure>

        <t>The fields have the following meaning:
          <list style="symbols">

            <t>Block Type: The block type of the Compression Block is not yet
            assigned.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

            <t>Compression Type: specifies the compression algorithm. Possible
            values for this field are 0 (uncompressed), 1 (Lempel Ziv), 2
            (Gzip), other?? Probably some kind of dumb and fast compression
            algorithm could be effective with some types of traffic (for
            example web), but which?</t>

            <t>Compressed Data: data of this block. Once decompressed, it is
            made of other blocks.</t>

          </list>
        </t>
      </section>


      <section title="Encryption Block (experimental)">

        <t>The Encryption Block is optional. A file can contain an arbitrary
        number of these blocks. An Encryption Block is used to store encrypted
        data. Its format is shown in <xref target="formateb"/>.</t>

        <figure anchor="formateb" title="Encryption Block Format">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------------------------------------------------------+
|                        Block Type = ?                         |
+---------------------------------------------------------------+
|                      Block Total Length                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Encr. Type  |                                               |
+-+-+-+-+-+-+-+-+                                               |
|                                                               |
|                       Encrypted Data                          |
|                                                               |
|                 variable length, octet-aligned                |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      Block Total Length                       |
+---------------------------------------------------------------+
 </artwork>
        </figure>

        <t>The fields have the following meaning:
          <list style="symbols">

            <t>Block Type: The block type of the Encryption Block is not yet
            assigned.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

            <t>Encryption Type: specifies the encryption algorithm. Possible
            values for this field are ??? (TODO) NOTE: this block should
            probably contain other fields, depending on the encryption
            algorithm. To be defined precisely.</t>

            <t>Encrypted Data: data of this block. Once decrypted, it
            originates other blocks.</t>

          </list>
        </t>
      </section>


      <section title="Fixed Length Block (experimental)">

        <t>The Fixed Length Block is optional. A file can contain an arbitrary
        number of these blocks. A Fixed Length Block can be used to optimize
        the access to the file. Its format is shown in <xref
        target="formatflm"/>. A Fixed Length Block stores records with
        constant size. It contains a set of Blocks (normally Enhanced Packet
        Blocks or Simple Packet Blocks), of which it specifies the size.
        Knowing this size a priori helps to scan the file and to load some
        portions of it without truncating a block, and is particularly useful
        with cell-based networks like ATM.</t>

        <figure anchor="formatflm" title="Fixed Length Block Format">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------------------------------------------------------+
|                        Block Type = ?                         |
+---------------------------------------------------------------+
|                      Block Total Length                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Cell Size            |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
|                                                               |
|                        Fixed Size Data                        |
|                                                               |
|                 variable length, octet-aligned                |
|                                                               |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      Block Total Length                       |
+---------------------------------------------------------------+
 </artwork>
        </figure>

        <t>The fields have the following meaning:
          <list style="symbols">

            <t>Block Type: The block type of the Fixed Length Block is not yet
            assigned.</t>

            <t>Block Total Length: total size of this block, as described in
            <xref target="section_block"/>.</t>

            <t>Cell size: the size of the blocks contained in the data
            field.</t>

            <t>Fixed Size Data: data of this block.</t>

          </list>
        </t>
      </section>


      <section title="Directory Block (experimental)">

        <t>If present, this block contains the following information:
          <list style="symbols">
            <t>number of indexed packets (N)</t>

            <t>table with position and length of any indexed packet (N
            entries)</t>

          </list>
        </t>

        <t>A directory block MUST be followed by at least N packets, otherwise
        it MUST be considered invalid. It can be used to efficiently load
        portions of the file to memory and to support operations on memory
        mapped files. This block can be added by tools like network analyzers
        as a consequence of file processing.</t>

      </section>


      <section title="Traffic Statistics and Monitoring Blocks (experimental)">

        <t>One or more blocks could be defined to contain network statistics
        or traffic monitoring information. They could be use to store data
        collected from RMON or Netflow probes, or from other network
        monitoring tools.</t>

      </section>


      <section title="Event/Security Block (experimental)">

        <t>This block could be used to store events. Events could contain
        generic information (for example network load over 50%, server
        down...) or security alerts. An event could be:

          <list style="symbols">
            <t>skipped, if the application doesn't know how to do with it</t>

            <t>processed independently by the packets. In other words, the
            applications skips the packets and processes only the alerts</t>

            <t>processed in relation to packets: for example, a security tool
            could load only the packets of the file that are near a security
            alert; a monitoring tool could skip the packets captured while the
            server was down.</t>

          </list>
        </t>
      </section>

    </section>


    <section anchor="section_vendor" title="Vendor-Specific Custom Extensions">

      <t>This section uses the term "vendor" to describe an organization which
      extends the pcapng file with custom, proprietary blocks or options. It
      should be noted, however, that the "vendor" is just an abstract entity
      that agrees on a custom extension format: for example it may be a
      manufacturer, industry association, an individual user, or collective
      group of users.</t>

      <section anchor="section_vendor_uses" title="Supported Use-Cases">

        <t>There are two different supported use-cases for vendor-specific
        custom extensions: local and portable. Local use means the custom data
        is only expected to be usable on the same machine, and the same
        application, which encoded it into the file. This limitation is due to
        the lack of a common registry for the local use number codes (the
        block or option type code numbers with the Most Significant Bit set).
        Since two different vendors may choose the same number, one vendor's
        application reading the other vendor's file would result in decoding
        failure. Therefore, vendors SHOULD instead use the portable method, as
        described next.</t>

        <t>The portable use-case supports vendor-specific custom extensions in
        pcapng files which can be shared across systems, organizations, etc.
        To avoid number space collisions, an IANA-registered Private
        Enterprise Number (PEN) is encoded into the Custom Block or Custom
        Option, using the PEN number that belongs to the vendor defining the
        extension. Anyone can register a new PEN with IANA, for free, by
        filling out the online request form at <eref
        target="http://pen.iana.org/pen/PenApplication.page">http://pen.iana.org/pen/PenApplication.page</eref>.</t>

      </section>

      <section anchor="section_vendor_copy" title="Controlling Copy Behavior">

        <t>Both Custom Blocks and Custom Options support two different codes
        to distinguish their "copy" behavior: a code for when the block or
        option can be safely copied into a new pcapng file by a pcapng
        manipulating application, and a code for when it should not be copied.
        A common reason for not copying a Custom Block or Custom Option is
        because it depends on other blocks or options in some way that would
        invalidate the custom data if the other blocks/options were removed or
        re-ordered. For example, if a Custom Block's data includes an
        Interface ID number in its Custom Data portion, then it cannot be
        safely copied by a pcapng application that merges pcapng files,
        because the merging application might re-order or remove one or more
        of the Interface Description Blocks, and thereby change the Interface
        IDs that the Custom Block depends upon. The same issue arises if a
        Custom Block or Custom Option depends on the presence of, or specific
        ordering of, other standard-based or custom-defined blocks or
        options.</t>

        <t>Note that the copy semantics is not related to privacy - there is
        no guarantee that a pcapng anonymizer will remove a Custom Block or
        Custom Option, even if the appropriate code is used requesting it not
        be copied; and the original pcapng file can be shared anyway. If the
        Custom Data portion of the Custom Block or Custom Option contains
        sensitive information, then it should be encrypted in some
        fashion.</t>

      </section>

      <section anchor="section_vendor_strings" title="Strings vs. Bytes">

        <t>For the Custom Options, there are two Custom Data formats
        supported: a UTF-8 string and a binary data payload. The rationale for
        this separation is that a pcapng display application which does not
        understand the specific PEN's Custom Option can still display the data
        as a string if it's a string type code, rather than as hex-ascii of
        the octets.</t>

      </section>

      <section anchor="section_vendor_endian" title="Endianness Issues">

        <t>Implementers writing Custom Blocks or Custom Options should be
        aware that a pcapng file can be re-written by machines using a
        different endianness than the original file, which means all known
        fields of the pcapng file will change endianness in the new file.
        Since the Custom Data payload of the Custom Block or Custom Option
        might be an arbitrary sequence of unknown octets to such machines, they
        cannot convert multi-byte values inside the Custom Data into the
        appropriate endianness.</t>

        <t>For example, a little-endian machine can create a new pcapng file
        and add some binary data Custom Options to some Block(s) in the file.
        This file can then be sent to a big-endian host, which will convert it
        to big-endian format if it re-writes the file. It will, however, leave
        the Custom Data payload alone (as little-endian format). If this file
        then gets sent back to the little-endian machine, then when that
        little-endian machine reads the file it will detect the format is big-
        endian, and swap the endianness while it parses the file - but that
        will cause the Custom Data payload to be incorrect since it was
        already in little-endian format.</t>

        <t>Therefore, the vendor should either encode all of their fields in a
        consistent manner, such as always in big-endian or always little-
        endian format, regardless of the host platform's endianness; or they
        should encode some flag in the Custom Data payload to indicate which
        endianness the rest of the payload is written in.</t>

      </section>

    </section>


    <section title="Recommended File Name Extension: .pcapng">

      <t>The recommended file name extension for the "PCAP Next Generation
      Capture File Format" specified in this document is ".pcapng".</t>

      <t>On Windows and OS X, files are distinguished by an extension to their
      filename. Such an extension is technically not actually required, as
      applications should be able to automatically detect the pcapng file
      format through the "magic bytes" at the beginning of the file, as some
      other UN*X desktop environments do. However, using name extensions makes
      it easier to work with files (e.g. visually distinguish file formats) so
      it is recommended - though not required - to use .pcapng as the name
      extension for files following this specification.</t>

      <t>Please note: To avoid confusion (like the current usage of .cap for a
      plethora of different capture file formats) other file name extensions
      than .pcapng should be avoided.</t>

    </section>


    <section title="Conclusions">

      <t>The file format proposed in this document should be very versatile
      and satisfy a wide range of applications. In the simplest case, it can
      contain a raw capture of the network data, made of a series of Simple
      Packet Blocks. In the most complex case, it can be used as a repository
      for heterogeneous information. In every case, the file remains easy to
      parse and an application can always skip the data it is not interested
      in; at the same time, different applications can share the file, and
      each of them can benefit of the information produced by the others. Two
      or more files can be concatenated obtaining another valid file.</t>

    </section>


    <section title="Implementations">

      <t>Some known implementations that read or write the pcapng file format
      are listed on the <eref
      target="https://github.com/pcapng/pcapng/wiki/Implementations">pcapng
      GitHub wiki</eref>.</t>

    </section>


    <section title="Security Considerations">

      <t>TBD.</t>

    </section>

    <section title="IANA Considerations">
      <t>TBD.</t>

      <t>[Open issue: decide whether the block types, option types, NRB Record
      types, etc. should be IANA registries. And if so, what the IANA policy
      for each should be (see RFC 5226)]</t>

      <section anchor="section_block_code_registry" title="Standardized Block Type Codes">

        <t>Every Block is uniquely identified by a 32-bit integer value, stored
        in the Block Header.</t>

        <t>As pointed out in <xref target="section_block"></xref>, Block Type
        codes whose Most Significant Bit (bit 31) is set to 1 are reserved for
        local use by the application.</t>

        <t>All the remaining Block Type codes (0x00000000 to 0x7FFFFFFF) are
        standardized by this document. Requests for new Block Type codes
        should be sent to the <eref
        target="https://www.winpcap.org/mailman/listinfo/pcap-ng-format">pcap-
        ng-format mailing list</eref>.</t>

        <t>The following is a list of the Standardized Block Type Codes:</t>

        <texttable anchor="blockcodes" title="Standardized Block Type Codes">
          <ttcol align="left">Block Type Code</ttcol>
          <ttcol align="left">Description</ttcol>

          <c>0x00000000</c>
          <c>Reserved ???</c>

          <c>0x00000001</c>
          <c>
            <xref target="section_idb">Interface Description Block</xref>
          </c>

          <c>0x00000002</c>
          <c>
            <xref target="appendix_pb">Packet Block</xref>
          </c>

          <c>0x00000003</c>
          <c>
            <xref target="section_spb">Simple Packet Block</xref>
          </c>

          <c>0x00000004</c>
          <c>
            <xref target="section_nrb">Name Resolution Block</xref>
          </c>

          <c>0x00000005</c>
          <c>
            <xref target="section_isb">Interface Statistics Block</xref>
          </c>

          <c>0x00000006</c>
          <c>
            <xref target="section_epb" >Enhanced Packet Block</xref>
          </c>

          <c>0x00000007</c>
          <c>IRIG Timestamp Block (requested by Gianluca Varenni
          &lt;gianluca.varenni@cacetech.com&gt;, CACE Technologies LLC)</c>

          <c>0x00000008</c>
          <c>
            <eref target="https://en.wikipedia.org/wiki/ARINC_429">ARINC
            429</eref> in AFDX Encapsulation Information Block (requested by
            Gianluca Varenni &lt;gianluca.varenni@cacetech.com&gt;, CACE
            Technologies LLC)
          </c>

          <c>0x00000BAD</c>
          <c>
            <xref target="section_custom_block">Custom Block that rewriters can
            copy into new files</xref>
          </c>

          <c>0x40000BAD</c>
          <c>
            <xref target="section_custom_block">Custom Block that rewriters should
            not copy into new files</xref>
          </c>

          <c>0x0A0D0D0A</c>
          <c>
            <xref target="section_shb" >Section Header Block</xref>
          </c>

          <c>0x0A0D0A00-0x0A0D0AFF</c>
          <c>Reserved. Used to detect trace files corrupted because of file
          transfers using the HTTP protocol in text mode.</c>

          <c>0x000A0D0A-0xFF0A0D0A</c>
          <c>Reserved. Used to detect trace files corrupted because of file
          transfers using the HTTP protocol in text mode.</c>

          <c>0x000A0D0D-0xFF0A0D0D</c>
          <c>Reserved. Used to detect trace files corrupted because of file
          transfers using the HTTP protocol in text mode.</c>

          <c>0x0D0D0A00-0x0D0D0AFF</c>
          <c>Reserved. Used to detect trace files corrupted because of file
          transfers using the FTP protocol in text mode.</c>

          <c>0x80000000-0xFFFFFFFF</c>
          <c>Reserved for local use.</c>

        </texttable>

        <t>[Open issue: reserve 0x40000000-0x7FFFFFFF for do-not-copy-bit
        range of base types?]</t>

      </section>

    </section>


    <section title='Contributors'>

      <t>Loris Degioanni and Gianluca Varenni were coauthoring this document
      before it was submitted to the IETF.</t>

    </section>


    <section title="Acknowledgments">

      <t>The authors wish to thank
      Anders Broman,
      Ulf Lamping,
      Richard Sharpe
      and many others for their invaluable comments.</t>

    </section>

  </middle>


<!--===========================================================================

    Back End - still within the <rfc> tag

============================================================================-->


  <back>
    <references title='Normative References'>
      <?rfc include='reference.RFC.2119'?>
    </references>

    <!--
    <references title='Informational References'>
    </references>
    -->

    <section anchor="appendix_pb" title="Packet Block (obsolete!)">

      <t>The Packet Block is obsolete, and MUST NOT be used in new files. Use
      the Enhanced Packet Block or Simple Packet Block instead. This section
      is for historical reference only.</t>

      <t>A Packet Block was a container for storing packets coming from the
      network.</t>

      <figure anchor="formatpb" title="Packet Block Format">
        <artwork xml:space="preserve" name="" type="" align="center" alt="" width="" height="">
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------------------------------------------------------+
 0 |                    Block Type = 0x00000002                    |
   +---------------------------------------------------------------+
 4 |                      Block Total Length                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 8 |         Interface ID          |          Drops Count          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
12 |                        Timestamp (High)                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
16 |                        Timestamp (Low)                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
20 |                    Captured Packet Length                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
24 |                    Original Packet Length                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
28 /                                                               /
   /                          Packet Data                          /
   /              variable length, padded to 32 bits               /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   /                                                               /
   /                      Options (variable)                       /
   /                                                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Block Total Length                       |
   +---------------------------------------------------------------+
</artwork>
      </figure>

      <t>The Packet Block has the following fields:
        <list style="symbols">
          <t>Block Type: The block type of the Packet Block is 2.</t>

          <t>Block Total Length: total size of this block, as described in
          <xref target="section_block"/>.</t>

          <t>Interface ID: specifies the interface this packet comes from;
          the correct interface will be the one whose Interface Description
          Block (within the current Section of the file) is identified by the
          same number (see <xref target="section_idb"/>) of this field. The
          interface ID MUST be valid, which means that an matching interface
          description block MUST exist.</t>

          <t>Drops Count: a local drop counter. It specifies the number of
          packets lost (by the interface and the operating system) between
          this packet and the preceding one. The value xFFFF (in hexadecimal)
          is reserved for those systems in which this information is not
          available.</t>

          <t>Timestamp (High) and Timestamp (Low): timestamp of the packet.
          The format of the timestamp is the same as was already defined
          for the Enhanced Packet Block (<xref target="section_epb"/>).</t>

          <t>Captured Packet Length: number of octets captured from the
          packet (i.e. the length of the Packet Data field). It will be the
          minimum value among the Original Packet Length and the
          snapshot length for the interface (SnapLen, defined in
          <xref target="format_idb"/>). The value of this field does
          not include the padding octets added at the end of the Packet
          Data field to align the Packet Data field to a 32-bit
          boundary.</t>

          <t>Original Packet Length: actual length of the packet when it was
          transmitted on the network. It can be different from Captured Packet
          Length if the packet has been truncated by the capture process.</t>

          <t>Packet Data: the data coming from the network, including
          link-layer headers. The actual length of this field is
          Captured Packet Length plus the padding to a 32-bit
          boundary. The format of the link-layer headers depends on
          the LinkType field specified in the Interface Description
          Block (see <xref target="section_idb"/>) and it is specified
          in the entry for that format in the <eref
          target="http://www.tcpdump.org/linktypes.html">the
          tcpdump.org link-layer header types registry</eref>.</t>

          <t>Options: optionally, a list of options (formatted according to
          the rules defined in <xref target="section_opt"/>) can be present.</t>

        </list>
      </t>

      <t>In addition to the options defined in <xref target="section_opt"/>,
      the following options were valid within this block:</t>

      <texttable anchor="optionspb" title="Packet Block Options">
        <ttcol align="left">Name</ttcol>
        <ttcol align="left">Code</ttcol>
        <ttcol align="left">Length</ttcol>
          <ttcol align="left">Multiple allowed?</ttcol>

        <c>pack_flags</c>
        <c>2</c>
        <c>4</c>
        <c>no</c>

        <c>pack_hash</c>
        <c>3</c>
        <c>variable</c>
        <c>yes</c>
      </texttable>

      <t>
        <list hangIndent="8" style="hanging">

          <t hangText="pack_flags:"><vspace blankLines="0"/>The pack_flags
          option is the same as the epb_flags of the enhanced packet
          block.</t>

          <t>Example: '0'.</t>

          <t hangText="pack_hash:"><vspace blankLines="0"/>The pack_hash
          option is the same as the epb_hash of the enhanced packet block.</t>

          <t>Examples: '02 EC 1D 87 97', '03 45 6E C2 17 7C 10 1E 3C 2E 99 6E
          C2 9A 3D 50 8E'.</t>

        </list>
      </t>
    </section>


  </back>
</rfc>